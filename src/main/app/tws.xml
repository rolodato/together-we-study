<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:twitter="http://www.mulesoft.org/schema/mule/twitter" xmlns:jdbc-ee="http://www.mulesoft.org/schema/mule/ee/jdbc" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/twitter http://www.mulesoft.org/schema/mule/twitter/2.4/mule-twitter.xsd
http://www.mulesoft.org/schema/mule/ee/jdbc http://www.mulesoft.org/schema/mule/ee/jdbc/current/mule-jdbc-ee.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd" version="EE-3.4.1">
    <apikit:config name="apiConfig" raml="tws.raml" consoleEnabled="true" consolePath="console" doc:name="Router"/>
    <apikit:mapping-exception-strategy name="apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" />
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" />
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" />
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" />
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" />
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
    <jdbc-ee:mysql-data-source name="TWS_MySQL" user="root" password="123qwe" url="jdbc:mysql://localhost:3306/tws" transactionIsolation="UNSPECIFIED" doc:name="MySQL Data Source"/>
    <jdbc-ee:connector name="Database" dataSource-ref="TWS_MySQL" validateConnections="true" queryTimeout="-1" pollingFrequency="0" doc:name="Database">
        <jdbc-ee:query key="Create new user" value="INSERT INTO user (name, email, school, location)
VALUES (#[payload.userName],
        #[payload.email],
        #[payload.school],
        #[payload.location])"/>

        <jdbc-ee:query key="Create new posting" value="INSERT INTO lfg (owner, title, studySubject, startTime, endTime)
VALUES (#[payload.owner],
        #[payload.title],
        #[payload.studySubject],
        #[payload.after],
        #[payload.before])"/> 
        <jdbc-ee:query key="Delete user by ID" value="DELETE FROM user WHERE id = #[payload.userID]"/>
        <jdbc-ee:query key="Select users by criteria" value="SELECT * FROM user
WHERE (location LIKE #['%' + payload.location + '%']
	and school LIKE #['%' + payload.school + '%']
	and name LIKE #['%' + payload.userName + '%'])"/>
        <jdbc-ee:query key="Select posting and user by posting ID" value="SELECT *
FROM lfg JOIN user ON lfg.owner = user.id
WHERE lfg.id = #[flowVars.lfgID]"/>

        <jdbc-ee:query key="Delete posting by ID" value="DELETE FROM lfg WHERE id = #[flowVars.lfgID]"/>
        <jdbc-ee:query key="Select postings by criteria" value="SELECT *
FROM lfg JOIN user ON lfg.owner = user.id
WHERE title LIKE #['%' + payload.title + '%']
	and studySubject LIKE #['%' + payload.studySubject + '%']
	and (startTime &gt;= #[payload.startTime] OR startTIME IS NULL)
	and (endTime &lt;= #[payload.endTime] OR endTIME is NULL)
	and location LIKE #['%' + payload.location + '%']"/>   </jdbc-ee:connector>
    <twitter:config name="Twitter" consumerKey="yin362UEYLybMAiiKyow" consumerSecret="SNPmw8kA3unJoul2aEKqrrwIvhkaVRnq2l7w28lQg" doc:name="Twitter" accessKey="2187710478-9IC2i15VyzpBUOBZWXkgpVxDHDBFE8lWhBAWEXh" accessSecret="j6CR7Z4xXV2tGqxg5P1qrXvGbJkYH7nqwMRwlsWLBqAJ1">
        <twitter:connection-pooling-profile initialisationPolicy="INITIALISE_ONE" exhaustedAction="WHEN_EXHAUSTED_GROW"/>
    </twitter:config>
    <flow name="main" doc:name="main">
        <http:inbound-endpoint address="http://localhost:8081/api" doc:name="HTTP"/>
        <apikit:router config-ref="apiConfig" doc:name="APIkit Router"/>
        <exception-strategy ref="apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="delete:/lfg/{lfgID}:apiConfig" doc:name="delete:/lfg/{lfgID}:apiConfig">
        <jdbc-ee:outbound-endpoint exchange-pattern="one-way" queryKey="Delete posting by ID" queryTimeout="-1" connector-ref="Database" doc:name="Delete posting by ID"/>

    </flow>
    <flow name="get:/users:apiConfig" doc:name="get:/users:apiConfig">
        <http:body-to-parameter-map-transformer doc:name="Body to Parameter Map"/>
        <custom-transformer returnClass="java.util.HashMap" class="rolodato.tws.transformers.UserSearchTransformer" doc:name="Java"/>
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="Select users by criteria" queryTimeout="-1" connector-ref="Database" doc:name="Select users by criteria"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>

    </flow>
    <flow name="get:/lfg:apiConfig" doc:name="get:/lfg:apiConfig">
        <http:body-to-parameter-map-transformer doc:name="Body to Parameter Map"/>
        <custom-transformer class="rolodato.tws.transformers.LfgSearchTransformer" doc:name="Java"/>
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="Select postings by criteria" queryTimeout="-1" connector-ref="Database" doc:name="Select postings by criteria"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>

    </flow>
    <flow name="get:/lfg/{lfgID}:apiConfig" doc:name="get:/lfg/{lfgID}:apiConfig">
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="Select posting by ID" queryTimeout="-1" connector-ref="Database" doc:name="Select posting by ID">
            <jdbc-ee:query key="Select posting by ID" value="SELECT *
FROM lfg
WHERE id = #[flowVars.lfgID]"/>
        </jdbc-ee:outbound-endpoint>
        <set-payload value="#[message.payload[0]]" doc:name="Flatten single-result payload"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>

    </flow>
    <flow name="get:/users/{userID}:apiConfig" doc:name="get:/users/{userID}:apiConfig">
        <jdbc-ee:inbound-endpoint queryKey="Select user by ID" queryTimeout="-1" pollingFrequency="1000" connector-ref="Database" doc:name="Select user by ID">
            <jdbc-ee:query key="Select user by ID" value="SELECT * FROM user WHERE id = #[flowVars.userID]"/>
        </jdbc-ee:inbound-endpoint>
        <set-payload value="#[message.payload[0]]" doc:name="Flatten single-result payload"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>

    </flow>
    <flow name="post:/lfg:apiConfig" doc:name="post:/lfg:apiConfig">
        <http:body-to-parameter-map-transformer doc:name="Body to Parameter Map"/>
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="Create new posting" queryTimeout="-1" connector-ref="Database" doc:name="Create new posting"/>

    </flow>
    <flow name="post:/users:apiConfig" doc:name="post:/users:apiConfig">
        <http:body-to-parameter-map-transformer doc:name="Body to Parameter Map"/>
        <jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="Create new user" queryTimeout="-1" connector-ref="Database" doc:name="Create new user">
        </jdbc-ee:outbound-endpoint>

    </flow>
    <flow name="post:/lfg/{lfgID}/tweet:apiConfig" doc:name="post:/lfg/{lfgID}/tweet:apiConfig">
        <jdbc-ee:outbound-endpoint queryKey="Select posting and user by posting ID" queryTimeout="-1"  connector-ref="Database" doc:name="Select posting and user by posting ID" exchange-pattern="request-response"/>
        <set-payload value="#[message.payload[0]]" doc:name="Flatten single-result payload"/>
        <twitter:update-status config-ref="Twitter" status="#[payload.name] is looking for a group to study #[payload.studySubject] with!" doc:name="Tweet to @TogetherWeStudy"/>

    </flow>
</mule>
